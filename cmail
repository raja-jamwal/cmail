#! /usr/bin/python
"""

cmail (C) Raja Jamwal <linux1@zoho.com>

Changes:
	Added multiple parameters		 10/3/12
	Support for upload progress		 1/2/12
	Support for last modified date/time	 30/1/12
	Support for tree type directory listing  30/1/12
	Email contain content in HTML
"""
import os
#import tarfile
from optparse import OptionParser
#import smtplib
from smtplib import SMTP, quotedata, CRLF, SMTPDataError
from email.MIMEMultipart import MIMEMultipart
from email.MIMEText import MIMEText
from email.MIMEBase import MIMEBase
from email.MIMEText import MIMEText
from email.Utils import COMMASPACE, formatdate
from email import Encoders

import time
import sys

smtp_server = "smtp.mail.yahoo.co.in" # smtp.gmail.com
smtp_port = "587" # port may be 465 or 587, check with mail provider
smtp_login = ["example@example.com","password"] # example@example.com, password
mail_meta =  ["example-from@example.com", "example-to@gmail.com", "Subject_here", []] # from, to, subject, CCs
mail_text = "<html><body>" # some text

binary = ""
prev_pct = 0
def callback( progress, total ):
	global prev_pct
	sys.stdout.write('\x08' * (len(str(prev_pct))+1))
	pct = (float(progress*100))/total
	sys.stdout.write(str(round(pct,2))+"%")
	prev_pct = round(pct,2)
	sys.stdout.flush()	

class ExtendedSMTP(SMTP): 	
    def data(self,msg):
        """
			This is a modified copy of smtplib.SMTP.data()
			
			Sending data in chunks and calling self.callback
			to keep track of progress,
		"""
        self.putcmd("data")
        (code,repl)=self.getreply()
        if self.debuglevel >0 : print>>stderr, "data:", (code,repl)
        if code != 354:
            raise SMTPDataError(code,repl)
        else:
            q = quotedata(msg)
            if q[-2:] != CRLF:
                q = q + CRLF
            q = q + "." + CRLF
            
            # begin modified send code
            chunk_size = 2048
            bytes_sent = 0
            
            while bytes_sent != len(q):
                chunk = q[bytes_sent:bytes_sent+chunk_size]
                self.send(chunk)
                bytes_sent += len(chunk)
                if hasattr(self, "callback"):
                    self.callback(bytes_sent, len(q))
            # end modified send code
            
            (code,msg)=self.getreply()
            if self.debuglevel >0 : print>>stderr, "data:", (code,msg)
            return (code,msg)

def prep_send(filec):
  try:
	print "Sending through \""+smtp_server+"\"..."
	msg = MIMEMultipart()
	print "Details... "
	
	print "   Server   ("+str(smtp_server)+","+smtp_port+")"
	print "   Login    ("+smtp_login[0]+","+smtp_login[1]+")"
	print "   From	    ("+str(mail_meta[0])+")"
	print "   To	    ("+str(mail_meta[1])+")"
	print "   Content  ("+filec[0:7]+"...)"
	
	msg['From'] = mail_meta[0]
  	msg['To'] = COMMASPACE.join(mail_meta[1])
	msg['BCC'] = COMMASPACE.join(mail_meta[3])
  	msg['Date'] = formatdate(localtime=True)
  	msg['Subject'] = ""+str(mail_meta[2])
	msg.attach(MIMEText(mail_text, "html"))


	#add the file TODO: multiple files with multi directory option
	if os.path.exists(binary) == True and len(binary) !=0:
		print "Encoding binary data for email..."
     		part = MIMEBase('application', "octet-stream")
     		part.set_payload( open(binary,"rb").read() )
     		Encoders.encode_base64(part)
     		part.add_header('Content-Disposition', 'attachment; filename="%s"' % os.path.basename(binary))
    		msg.attach(part)

	sys.stdout.write("Authenticating and sending..... ")
	
	server = ExtendedSMTP(smtp_server,smtp_port)
	server.callback = callback
	server.ehlo()

	if server.has_extn('STARTTLS'):
		server.starttls()
		server.ehlo()

	server.login(smtp_login[0],smtp_login[1])
	server.sendmail(mail_meta[0],mail_meta[1],msg.as_string())
	server.close()
	print ""	
	print "Done..."
  except socket.gaierror:
   	print "Error: unable to send email"

def main(args):
	global mail_text
	mail_text += ""+str(args)+""	
	mail_text += "</body></html>"			
	prep_send(mail_text)
    
if __name__ == "__main__":

    print "\nCMail (C) Raja Jamwal <linux1@zoho.com>"
    parser = OptionParser(usage="%prog [--content] [HTML/text content] [Mail options] [SMTP options]")
    parser.add_option("-m", "--content", dest="content", help ="html/text content")
    parser.add_option("-f", "--from", dest="from_id", help="email addr. to send from", default=mail_meta[0])
    parser.add_option("-t", "--to", dest="to_id", help="email addr. to send to", default=mail_meta[1])
    parser.add_option("-c","--bcc", dest="to_cc", help="send carbon copies to", default=mail_meta[3])
    parser.add_option("-s", "--subject", dest="sub", help="subject of mail", default=mail_meta[2])
    parser.add_option("-b", "--binary", dest="bin", help="attach a file", default=binary)
    parser.add_option("-a", "--server", dest="server", help="smtp server addr.", default=smtp_server)
    parser.add_option("-p", "--port", dest="port", help="smtp port number", default=smtp_port)
    parser.add_option("-u", "--username", dest="username", help="smtp login username", default=smtp_login[0])
    parser.add_option("-l", "--password", dest="password", help="smtp login password", default=smtp_login[1]) 
    
    options, args = parser.parse_args()

    if str(options.bin) != None:
	binary = options.bin

    if str(options.to_cc) != None:
	mail_meta[3] = str(options.to_cc).split(",")

    if str(options.from_id) != None:
	mail_meta[0] = str(options.from_id)

    if str(options.to_id) != None:
	mail_meta[1] = str(options.to_id)

    if str(options.sub) != None:
	mail_meta[2] = str(options.sub)

    if str(options.server) != None:
	smtp_server = str(options.server)

    if str(options.port) != None:
	smtp_port = str(options.port)

    if str(options.username) != None:
	smtp_login[0] = str(options.username)

    if str(options.password) != None:
	smtp_login[1] = str(options.password)

    if str(options.content)=="":
	print "Error: email content isn't provided"
	exit()

    main(options.content)



